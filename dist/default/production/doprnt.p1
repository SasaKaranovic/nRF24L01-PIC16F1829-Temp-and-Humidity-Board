Version 3.2 HI-TECH Software Intermediate Code
[v F10 `(v ~T0 @X0 0 tf1`uc ]
"43 C:\Program Files (x86)\Microchip\xc8\v1.38\include\stdio.h
[s S1 `*uc 1 `*F10 1 ]
[n S1 __prbuf ptr func ]
"7 C:\Program Files (x86)\Microchip\xc8\v1.38\include\ctype.h
[v _isdigit `(b ~T0 @X0 0 ef1`uc ]
"13 C:\Program Files (x86)\Microchip\xc8\v1.38\include\stdarg.h
[v ___va_arg `(*v ~T0 @X0 0 ev`*v ]
[p i ___va_arg ]
[; ;__size_t.h: 4: typedef unsigned size_t;
[; ;stdarg.h: 7: typedef void * va_list[1];
[; ;stdarg.h: 10: extern void * __va_start(void);
[; ;stdarg.h: 13: extern void * __va_arg(void *, ...);
[; ;stdio.h: 43: struct __prbuf
[; ;stdio.h: 44: {
[; ;stdio.h: 45: char * ptr;
[; ;stdio.h: 46: void (* func)(char);
[; ;stdio.h: 47: };
[; ;errno.h: 29: extern int errno;
[; ;conio.h: 12: extern void init_uart(void);
[; ;conio.h: 14: extern char getch(void);
[; ;conio.h: 15: extern char getche(void);
[; ;conio.h: 16: extern void putch(char);
[; ;conio.h: 17: extern void ungetch(char);
[; ;conio.h: 19: extern __bit kbhit(void);
[; ;conio.h: 23: extern char * cgets(char *);
[; ;conio.h: 24: extern void cputs(const char *);
[; ;stdio.h: 88: extern int cprintf(char *, ...);
[; ;stdio.h: 93: extern int _doprnt(struct __prbuf *, const register char *, register va_list);
[; ;stdio.h: 183: extern char * gets(char *);
[; ;stdio.h: 184: extern int puts(const char *);
[; ;stdio.h: 185: extern int scanf(const char *, ...) __attribute__((unsupported("scanf() is not supported by this compiler")));
[; ;stdio.h: 186: extern int sscanf(const char *, const char *, ...) __attribute__((unsupported("sscanf() is not supported by this compiler")));
[; ;stdio.h: 187: extern int vprintf(const char *, va_list) __attribute__((unsupported("vprintf() is not supported by this compiler")));
[; ;stdio.h: 188: extern int vsprintf(char *, const char *, va_list) __attribute__((unsupported("vsprintf() is not supported by this compiler")));
[; ;stdio.h: 189: extern int vscanf(const char *, va_list ap) __attribute__((unsupported("vscanf() is not supported by this compiler")));
[; ;stdio.h: 190: extern int vsscanf(const char *, const char *, va_list) __attribute__((unsupported("vsscanf() is not supported by this compiler")));
[; ;stdio.h: 194: extern int sprintf(char *, const char *, ...);
[; ;stdio.h: 195: extern int printf(const char *, ...);
[; ;ctype.h: 4: extern __bit isalpha(char);
[; ;ctype.h: 5: extern __bit isupper(char);
[; ;ctype.h: 6: extern __bit islower(char);
[; ;ctype.h: 7: extern __bit isdigit(char);
[; ;ctype.h: 8: extern __bit isxdigit(char);
[; ;ctype.h: 9: extern __bit isspace(char);
[; ;ctype.h: 10: extern __bit ispunct(char);
[; ;ctype.h: 11: extern __bit isalnum(char);
[; ;ctype.h: 12: extern __bit isprint(char);
[; ;ctype.h: 13: extern __bit isgraph(char);
[; ;ctype.h: 14: extern __bit iscntrl(char);
[; ;ctype.h: 17: extern char toupper(char);
[; ;ctype.h: 18: extern char tolower(char);
[; ;stdlib.h: 7: typedef unsigned short wchar_t;
[; ;stdlib.h: 15: typedef struct {
[; ;stdlib.h: 16: int rem;
[; ;stdlib.h: 17: int quot;
[; ;stdlib.h: 18: } div_t;
[; ;stdlib.h: 19: typedef struct {
[; ;stdlib.h: 20: unsigned rem;
[; ;stdlib.h: 21: unsigned quot;
[; ;stdlib.h: 22: } udiv_t;
[; ;stdlib.h: 23: typedef struct {
[; ;stdlib.h: 24: long quot;
[; ;stdlib.h: 25: long rem;
[; ;stdlib.h: 26: } ldiv_t;
[; ;stdlib.h: 27: typedef struct {
[; ;stdlib.h: 28: unsigned long quot;
[; ;stdlib.h: 29: unsigned long rem;
[; ;stdlib.h: 30: } uldiv_t;
[; ;stdlib.h: 53: extern double atof(const char *);
[; ;stdlib.h: 54: extern double strtod(const char *, const char **);
[; ;stdlib.h: 55: extern int atoi(const char *);
[; ;stdlib.h: 56: extern unsigned xtoi(const char *);
[; ;stdlib.h: 57: extern long atol(const char *);
[; ;stdlib.h: 58: extern long strtol(const char *, char **, int);
[; ;stdlib.h: 60: extern int rand(void);
[; ;stdlib.h: 61: extern void srand(unsigned int);
[; ;stdlib.h: 62: extern void * calloc(size_t, size_t);
[; ;stdlib.h: 63: extern div_t div(int numer, int denom);
[; ;stdlib.h: 64: extern udiv_t udiv(unsigned numer, unsigned denom);
[; ;stdlib.h: 65: extern ldiv_t ldiv(long numer, long denom);
[; ;stdlib.h: 66: extern uldiv_t uldiv(unsigned long numer,unsigned long denom);
[; ;stdlib.h: 67: extern unsigned long _lrotl(unsigned long value, unsigned int shift);
[; ;stdlib.h: 68: extern unsigned long _lrotr(unsigned long value, unsigned int shift);
[; ;stdlib.h: 69: extern unsigned int _rotl(unsigned int value, unsigned int shift);
[; ;stdlib.h: 70: extern unsigned int _rotr(unsigned int value, unsigned int shift);
[; ;stdlib.h: 75: extern void * malloc(size_t);
[; ;stdlib.h: 76: extern void free(void *);
[; ;stdlib.h: 77: extern void * realloc(void *, size_t);
[; ;xc8debug.h: 14: extern void __builtin_software_breakpoint(void);
[; ;stdlib.h: 86: extern int atexit(void (*)(void));
[; ;stdlib.h: 87: extern char * getenv(const char *);
[; ;stdlib.h: 88: extern char ** environ;
[; ;stdlib.h: 89: extern int system(char *);
[; ;stdlib.h: 90: extern void qsort(void *, size_t, size_t, int (*)(const void *, const void *));
[; ;stdlib.h: 91: extern void * bsearch(const void *, void *, size_t, size_t, int(*)(const void *, const void *));
[; ;stdlib.h: 92: extern int abs(int);
[; ;stdlib.h: 93: extern long labs(long);
[; ;stdlib.h: 95: extern char * itoa(char * buf, int val, int base);
[; ;stdlib.h: 96: extern char * utoa(char * buf, unsigned val, int base);
[; ;stdlib.h: 101: extern char * ltoa(char * buf, long val, int base);
[; ;stdlib.h: 102: extern char * ultoa(char * buf, unsigned long val, int base);
[; ;stdlib.h: 104: extern char * ftoa(float f, int * status);
[; ;string.h: 14: extern void * memcpy(void *, const void *, size_t);
[; ;string.h: 15: extern void * memmove(void *, const void *, size_t);
[; ;string.h: 16: extern void * memset(void *, int, size_t);
[; ;string.h: 20: extern void * __builtin_memcpy(void *, const void *, size_t);
[; ;string.h: 34: extern char * strcat(char *, const char *);
[; ;string.h: 35: extern char * strcpy(char *, const char *);
[; ;string.h: 36: extern char * strncat(char *, const char *, size_t);
[; ;string.h: 37: extern char * strncpy(char *, const char *, size_t);
[; ;string.h: 38: extern char * strdup(const char *);
[; ;string.h: 39: extern char * strtok(char *, const char *);
[; ;string.h: 42: extern int memcmp(const void *, const void *, size_t);
[; ;string.h: 43: extern int strcmp(const char *, const char *);
[; ;string.h: 44: extern int stricmp(const char *, const char *);
[; ;string.h: 45: extern int strncmp(const char *, const char *, size_t);
[; ;string.h: 46: extern int strnicmp(const char *, const char *, size_t);
[; ;string.h: 47: extern void * memchr(const void *, int, size_t);
[; ;string.h: 48: extern size_t strcspn(const char *, const char *);
[; ;string.h: 49: extern char * strpbrk(const char *, const char *);
[; ;string.h: 50: extern size_t strspn(const char *, const char *);
[; ;string.h: 51: extern char * strstr(const char *, const char *);
[; ;string.h: 52: extern char * stristr(const char *, const char *);
[; ;string.h: 53: extern char * strerror(int);
[; ;string.h: 54: extern size_t strlen(const char *);
[; ;string.h: 55: extern char * strchr(const char *, int);
[; ;string.h: 56: extern char * strichr(const char *, int);
[; ;string.h: 57: extern char * strrchr(const char *, int);
[; ;string.h: 58: extern char * strrichr(const char *, int);
[; ;sys.h: 22: extern int execl(char *, char *, ...);
[; ;sys.h: 23: extern int execv(char *, char **);
[; ;sys.h: 24: extern int execve(char *, char **, char **);
[; ;sys.h: 25: extern int execle(char *, char *, ...);
[; ;sys.h: 26: extern int execvp(char *, char **);
[; ;sys.h: 27: extern int execlp(char *, char *, ...);
[; ;sys.h: 28: extern int getpid(void);
[; ;sys.h: 29: extern char * mktemp(char *);
[; ;sys.h: 43: extern int spawnl(char *, char *, ...);
[; ;sys.h: 44: extern int spawnv(char *, char **);
[; ;sys.h: 45: extern int spawnle(char *, char *, ...);
[; ;sys.h: 46: extern int spawnve(char *, char **, char **);
[; ;sys.h: 47: extern int spawnlp(char *, char *, ...);
[; ;sys.h: 48: extern int spawnvp(char *, char **);
[; ;sys.h: 50: extern int chdir(char *);
[; ;sys.h: 51: extern int chdrv(char *);
[; ;sys.h: 52: extern int mkdir(char *);
[; ;sys.h: 53: extern int rmdir(char *);
[; ;sys.h: 54: extern char * getcwd(char *);
[; ;sys.h: 55: extern void persist_validate(void);
[; ;sys.h: 56: extern int persist_check(int);
[; ;sys.h: 57: extern char * getdrv(void);
[; ;sys.h: 58: extern char ** _getargs(char *, char *);
[; ;sys.h: 59: extern int _argc_;
[; ;sys.h: 70: extern void * sbrk(size_t);
[; ;sys.h: 71: extern void brk(void *);
[; ;sys.h: 77: extern int _pnum(unsigned long, signed char, signed char, unsigned char, unsigned char, struct __prbuf *, unsigned char);
[; ;sys.h: 78: extern int _fnum(double, short, short, short, struct __prbuf *, short);
[; ;math.h: 30: extern double fabs(double);
[; ;math.h: 31: extern double floor(double);
[; ;math.h: 32: extern double ceil(double);
[; ;math.h: 33: extern double modf(double, double *);
[; ;math.h: 34: extern double sqrt(double);
[; ;math.h: 35: extern double atof(const char *);
[; ;math.h: 36: extern double sin(double) ;
[; ;math.h: 37: extern double cos(double) ;
[; ;math.h: 38: extern double tan(double) ;
[; ;math.h: 39: extern double asin(double) ;
[; ;math.h: 40: extern double acos(double) ;
[; ;math.h: 41: extern double atan(double);
[; ;math.h: 42: extern double atan2(double, double) ;
[; ;math.h: 43: extern double log(double);
[; ;math.h: 44: extern double log10(double);
[; ;math.h: 45: extern double pow(double, double) ;
[; ;math.h: 46: extern double exp(double) ;
[; ;math.h: 47: extern double sinh(double) ;
[; ;math.h: 48: extern double cosh(double) ;
[; ;math.h: 49: extern double tanh(double);
[; ;math.h: 50: extern double eval_poly(double, const double *, int);
[; ;math.h: 51: extern double frexp(double, int *);
[; ;math.h: 52: extern double ldexp(double, int);
[; ;math.h: 53: extern double fmod(double, double);
[; ;math.h: 54: extern double trunc(double);
[; ;math.h: 55: extern double round(double);
"13 C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c
[p n 350 ]
"354
[v _dpowers `Cui ~T0 @X0 -> 0 `x s ]
[i _dpowers
:U ..
-> -> 1 `i `ui
-> -> 10 `i `ui
-> -> 100 `i `ui
-> -> 1000 `i `ui
-> -> 10000 `i `ui
..
]
[; ;doprnt.c: 354: const static unsigned int dpowers[] = {1, 10, 100, 1000, 10000,
[; ;doprnt.c: 359: };
"362
[v _hexpowers `Cui ~T0 @X0 -> 0 `x s ]
[i _hexpowers
:U ..
-> -> 1 `i `ui
-> -> 16 `i `ui
-> -> 256 `i `ui
-> -> 4096 `i `ui
..
]
[; ;doprnt.c: 362: const static unsigned int hexpowers[] = {1, 0x10, 0x100, 0x1000,
[; ;doprnt.c: 366: };
"369
[v _octpowers `Cui ~T0 @X0 -> 0 `x s ]
[i _octpowers
:U ..
-> -> 1 `i `ui
-> -> 8 `i `ui
-> -> 64 `i `ui
-> -> 512 `i `ui
-> -> 4096 `i `ui
-> 32768 `ui
..
]
[; ;doprnt.c: 369: const static unsigned int octpowers[] = {1, 010, 0100, 01000, 010000, 0100000,
[; ;doprnt.c: 375: };
"458
[v __doprnt `(i ~T0 @X0 1 ef3`*S1`*Cuc`**v ]
"459
{
[; ;doprnt.c: 455: int
[; ;doprnt.c: 458: _doprnt(struct __prbuf * pb, register const char * f, register va_list ap)
[; ;doprnt.c: 459: {
[e :U __doprnt ]
"458
[v _pb `*S1 ~T0 @X0 1 r1 ]
[v _f `*Cuc ~T0 @X0 1 R2 ]
[v _ap `**v ~T0 @X0 1 R3 ]
"459
[f ]
"499
[v _c `c ~T0 @X0 1 a ]
"501
[v _width `i ~T0 @X0 1 a ]
"506
[v _prec `c ~T0 @X0 1 a ]
"508
[v _flag `us ~T0 @X0 1 a ]
"523
[u S6 `ul 1 `d 1 ]
[n S6 . vd integ ]
"526
[v _tmpval `S6 ~T0 @X0 1 a ]
"528
[v _val `ui ~T0 @X0 1 a ]
"529
[v _len `ui ~T0 @X0 1 a ]
"530
[v _cp `*Cuc ~T0 @X0 1 a ]
[; ;doprnt.c: 499: signed char c;
[; ;doprnt.c: 501: int width;
[; ;doprnt.c: 506: signed char prec;
[; ;doprnt.c: 508: unsigned short flag;
[; ;doprnt.c: 523: union {
[; ;doprnt.c: 524: unsigned long vd;
[; ;doprnt.c: 525: double integ;
[; ;doprnt.c: 526: } tmpval;
[; ;doprnt.c: 528: unsigned int val;
[; ;doprnt.c: 529: unsigned len;
[; ;doprnt.c: 530: const char * cp;
[; ;doprnt.c: 536: while(c = *f++) {
"536
[e $U 8  ]
[e :U 9 ]
{
[; ;doprnt.c: 538: if(c != '%')
"538
[e $ ! != -> -> _c `i `ui -> 37 `ui 11  ]
[; ;doprnt.c: 540: {
"540
{
[; ;doprnt.c: 541: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
"541
[e $ ! != . *U _pb 1 -> -> 0 `i `*F10 12  ]
[e ( *U . *U _pb 1 (1 -> _c `uc ]
[e $U 13  ]
[e :U 12 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> _c `uc ]
[e :U 13 ]
[; ;doprnt.c: 542: continue;
"542
[e $U 8  ]
"543
}
[e :U 11 ]
[; ;doprnt.c: 543: }
[; ;doprnt.c: 546: width = 0;
"546
[e = _width -> 0 `i ]
[; ;doprnt.c: 548: flag = 0;
"548
[e = _flag -> -> 0 `i `us ]
[; ;doprnt.c: 550: for(;;) {
"550
{
[e :U 14 ]
{
[; ;doprnt.c: 551: switch(*f) {
"551
[e $U 18  ]
{
[; ;doprnt.c: 553: case '-':
"553
[e :U 19 ]
[; ;doprnt.c: 554: flag |= 0x08;
"554
[e =| _flag -> -> 8 `i `us ]
[; ;doprnt.c: 555: f++;
"555
[e ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x ]
[; ;doprnt.c: 556: continue;
"556
[e $U 16  ]
[; ;doprnt.c: 560: case ' ':
"560
[e :U 20 ]
[; ;doprnt.c: 561: flag |= 0x01;
"561
[e =| _flag -> -> 1 `i `us ]
[; ;doprnt.c: 562: f++;
"562
[e ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x ]
[; ;doprnt.c: 563: continue;
"563
[e $U 16  ]
[; ;doprnt.c: 573: case '#':
"573
[e :U 21 ]
[; ;doprnt.c: 574: flag |= 0x800;
"574
[e =| _flag -> -> 2048 `i `us ]
[; ;doprnt.c: 575: f++;
"575
[e ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x ]
[; ;doprnt.c: 576: continue;
"576
[e $U 16  ]
[; ;doprnt.c: 579: case '0':
"579
[e :U 22 ]
[; ;doprnt.c: 580: flag |= 0x04;
"580
[e =| _flag -> -> 4 `i `us ]
[; ;doprnt.c: 581: f++;
"581
[e ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x ]
[; ;doprnt.c: 582: continue;
"582
[e $U 16  ]
"584
}
[; ;doprnt.c: 584: }
[e $U 17  ]
"551
[e :U 18 ]
[e [\ *U _f , $ -> -> 45 `ui `uc 19
 , $ -> -> 32 `ui `uc 20
 , $ -> -> 35 `ui `uc 21
 , $ -> -> 48 `ui `uc 22
 17 ]
"584
[e :U 17 ]
[; ;doprnt.c: 585: break;
"585
[e $U 15  ]
"586
}
[e :U 16 ]
[; ;doprnt.c: 586: }
[e $U 14  ]
[e :U 15 ]
}
[; ;doprnt.c: 593: if(flag & 0x08)
"593
[e $ ! != & -> _flag `ui -> -> 8 `i `ui -> -> 0 `i `ui 23  ]
[; ;doprnt.c: 594: flag &= ~0x04;
"594
[e =& _flag -> ~ -> 4 `i `us ]
[e :U 23 ]
[; ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
"597
[e $ ! ( _isdigit (1 -> -> *U _f `ui `uc 24  ]
{
[; ;doprnt.c: 598: width = 0;
"598
[e = _width -> 0 `i ]
[; ;doprnt.c: 599: do {
"599
[e :U 27 ]
{
[; ;doprnt.c: 600: width *= 10;
"600
[e =* _width -> 10 `i ]
[; ;doprnt.c: 601: width += *f++ - '0';
"601
[e =+ _width -> - -> *U ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x `ui -> 48 `ui `i ]
"602
}
[; ;doprnt.c: 602: } while(isdigit((unsigned)*f));
[e $ ( _isdigit (1 -> -> *U _f `ui `uc 27  ]
[e :U 26 ]
"604
}
[; ;doprnt.c: 604: } else if(*f == '*') {
[e $U 28  ]
[e :U 24 ]
[e $ ! == -> *U _f `ui -> 42 `ui 29  ]
{
[; ;doprnt.c: 605: width = (*(int *)__va_arg((*(int **)ap), (int)0));
"605
[e = _width *U -> ( ___va_arg , (. -> *U -> _ap `**i `*v -> 0 `i `*i ]
[; ;doprnt.c: 606: f++;
"606
[e ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x ]
"608
}
[e :U 29 ]
"611
[e :U 28 ]
[; ;doprnt.c: 608: }
[; ;doprnt.c: 611: if(*f == '.') {
[e $ ! == -> *U _f `ui -> 46 `ui 30  ]
{
[; ;doprnt.c: 612: flag |= 0x4000;
"612
[e =| _flag -> -> 16384 `i `us ]
[; ;doprnt.c: 613: f++;
"613
[e ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x ]
[; ;doprnt.c: 615: if(*f == '*') {
"615
[e $ ! == -> *U _f `ui -> 42 `ui 31  ]
{
[; ;doprnt.c: 616: prec = (*(int *)__va_arg((*(int **)ap), (int)0));
"616
[e = _prec -> *U -> ( ___va_arg , (. -> *U -> _ap `**i `*v -> 0 `i `*i `c ]
[; ;doprnt.c: 617: f++;
"617
[e ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x ]
"618
}
[; ;doprnt.c: 618: } else
[e $U 32  ]
[e :U 31 ]
[; ;doprnt.c: 620: {
"620
{
[; ;doprnt.c: 621: prec = 0;
"621
[e = _prec -> -> 0 `i `c ]
[; ;doprnt.c: 622: while(isdigit((unsigned)*f))
"622
[e $U 33  ]
[e :U 34 ]
[; ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
"623
[e = _prec -> - -> + * -> _prec `i -> 10 `i -> *U ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x `i `ui -> 48 `ui `c ]
[e :U 33 ]
"622
[e $ ( _isdigit (1 -> -> *U _f `ui `uc 34  ]
[e :U 35 ]
"624
}
[e :U 32 ]
"625
}
[; ;doprnt.c: 624: }
[; ;doprnt.c: 625: } else {
[e $U 36  ]
[e :U 30 ]
{
[; ;doprnt.c: 626: prec = 0;
"626
[e = _prec -> -> 0 `i `c ]
"630
}
[e :U 36 ]
[; ;doprnt.c: 630: }
[; ;doprnt.c: 635: switch(c = *f++) {
"635
[e $U 38  ]
{
[; ;doprnt.c: 637: case 0:
"637
[e :U 39 ]
[; ;doprnt.c: 638: goto alldone;
"638
[e $U 40  ]
[; ;doprnt.c: 689: case 'o':
"689
[e :U 41 ]
[; ;doprnt.c: 691: flag |= 0x40;
"691
[e =| _flag -> -> 64 `i `us ]
[; ;doprnt.c: 693: break;
"693
[e $U 37  ]
[; ;doprnt.c: 697: case 'd':
"697
[e :U 42 ]
"698
[e :U 43 ]
[; ;doprnt.c: 698: case 'i':
[; ;doprnt.c: 699: break;
"699
[e $U 37  ]
[; ;doprnt.c: 703: case 'p':
"703
[e :U 44 ]
"712
[e :U 45 ]
[; ;doprnt.c: 712: case 'X':
[; ;doprnt.c: 714: flag |= 0x20;
"714
[e =| _flag -> -> 32 `i `us ]
[; ;doprnt.c: 718: case 'x':
"718
[e :U 46 ]
[; ;doprnt.c: 721: flag |= 0x80;
"721
[e =| _flag -> -> 128 `i `us ]
[; ;doprnt.c: 723: break;
"723
[e $U 37  ]
[; ;doprnt.c: 728: case 's':
"728
[e :U 47 ]
[; ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0));
"734
[e = _cp *U -> ( ___va_arg , (. -> *U -> _ap `***Cuc `*v -> -> 0 `i `*Cuc `**Cuc ]
[; ;doprnt.c: 740: if(!cp)
"740
[e $ ! ! != _cp -> -> 0 `i `*Cuc 48  ]
[; ;doprnt.c: 741: cp = "(null)";
"741
[e = _cp :s 1C ]
[e :U 48 ]
[; ;doprnt.c: 745: len = 0;
"745
[e = _len -> -> 0 `i `ui ]
[; ;doprnt.c: 746: while(cp[len])
"746
[e $U 49  ]
[e :U 50 ]
[; ;doprnt.c: 747: len++;
"747
[e ++ _len -> -> 1 `i `ui ]
[e :U 49 ]
"746
[e $ != -> *U + _cp * -> _len `ux -> -> # *U _cp `ui `ux `i -> -> -> 0 `i `Cuc `i 50  ]
[e :U 51 ]
[; ;doprnt.c: 750: dostring:
"750
[e :U 52 ]
[; ;doprnt.c: 753: if(prec && prec < len)
"753
[e $ ! && != -> _prec `i -> -> -> 0 `i `c `i < -> -> _prec `i `ui _len 53  ]
[; ;doprnt.c: 754: len = prec;
"754
[e = _len -> -> _prec `i `ui ]
[e :U 53 ]
[; ;doprnt.c: 757: if(width > len)
"757
[e $ ! > -> _width `ui _len 54  ]
[; ;doprnt.c: 758: width -= len;
"758
[e =- _width -> _len `i ]
[e $U 55  ]
"759
[e :U 54 ]
[; ;doprnt.c: 759: else
[; ;doprnt.c: 760: width = 0;
"760
[e = _width -> 0 `i ]
[e :U 55 ]
[; ;doprnt.c: 762: if(!(flag & 0x08))
"762
[e $ ! ! != & -> _flag `ui -> -> 8 `i `ui -> -> 0 `i `ui 56  ]
[; ;doprnt.c: 764: while(width--)
"764
[e $U 57  ]
[e :U 58 ]
[; ;doprnt.c: 765: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
"765
[e $ ! != . *U _pb 1 -> -> 0 `i `*F10 60  ]
[e ( *U . *U _pb 1 (1 -> -> 32 `ui `uc ]
[e $U 61  ]
[e :U 60 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> -> 32 `ui `uc ]
[e :U 61 ]
[e :U 57 ]
"764
[e $ != -- _width -> 1 `i -> 0 `i 58  ]
[e :U 59 ]
"765
[e :U 56 ]
[; ;doprnt.c: 767: while(len--)
"767
[e $U 62  ]
[e :U 63 ]
[; ;doprnt.c: 768: if(pb->func) (pb->func(*cp++)); else ((*pb->ptr++ = *cp++));
"768
[e $ ! != . *U _pb 1 -> -> 0 `i `*F10 65  ]
[e ( *U . *U _pb 1 (1 *U ++ _cp * -> -> 1 `i `x -> -> # *U _cp `i `x ]
[e $U 66  ]
[e :U 65 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x *U ++ _cp * -> -> 1 `i `x -> -> # *U _cp `i `x ]
[e :U 66 ]
[e :U 62 ]
"767
[e $ != -- _len -> -> 1 `i `ui -> -> 0 `i `ui 63  ]
[e :U 64 ]
[; ;doprnt.c: 770: if(flag & 0x08)
"770
[e $ ! != & -> _flag `ui -> -> 8 `i `ui -> -> 0 `i `ui 67  ]
[; ;doprnt.c: 771: while(width--)
"771
[e $U 68  ]
[e :U 69 ]
[; ;doprnt.c: 772: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
"772
[e $ ! != . *U _pb 1 -> -> 0 `i `*F10 71  ]
[e ( *U . *U _pb 1 (1 -> -> 32 `ui `uc ]
[e $U 72  ]
[e :U 71 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> -> 32 `ui `uc ]
[e :U 72 ]
[e :U 68 ]
"771
[e $ != -- _width -> 1 `i -> 0 `i 69  ]
[e :U 70 ]
"772
[e :U 67 ]
[; ;doprnt.c: 774: continue;
"774
[e $U 8  ]
[; ;doprnt.c: 784: case 'c':
"784
[e :U 73 ]
[; ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
"799
[e = _c -> *U -> ( ___va_arg , (. -> *U -> _ap `**i `*v -> 0 `i `*i `c ]
[; ;doprnt.c: 802: default:
"802
[e :U 74 ]
[; ;doprnt.c: 805: cp = (char *)&c;
"805
[e = _cp -> -> &U _c `*uc `*Cuc ]
[; ;doprnt.c: 806: len = 1;
"806
[e = _len -> -> 1 `i `ui ]
[; ;doprnt.c: 807: goto dostring;
"807
[e $U 52  ]
[; ;doprnt.c: 817: case 'u':
"817
[e :U 75 ]
[; ;doprnt.c: 818: flag |= 0xC0;
"818
[e =| _flag -> -> 192 `i `us ]
[; ;doprnt.c: 819: break;
"819
[e $U 37  ]
"822
}
[; ;doprnt.c: 822: }
[e $U 37  ]
"635
[e :U 38 ]
[e [\ = _c -> *U ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x `c , $ -> -> 0 `i `c 39
 , $ -> -> 111 `ui `c 41
 , $ -> -> 100 `ui `c 42
 , $ -> -> 105 `ui `c 43
 , $ -> -> 112 `ui `c 44
 , $ -> -> 88 `ui `c 45
 , $ -> -> 120 `ui `c 46
 , $ -> -> 115 `ui `c 47
 , $ -> -> 99 `ui `c 73
 , $ -> -> 117 `ui `c 75
 74 ]
"822
[e :U 37 ]
[; ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
"1251
[e $ ! == & -> _flag `ui -> -> 192 `i `ui -> -> 0 `i `ui 76  ]
[; ;doprnt.c: 1253: {
"1253
{
[; ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
"1259
[e = _val -> *U -> ( ___va_arg , (. -> *U -> _ap `**i `*v -> 0 `i `*i `ui ]
[; ;doprnt.c: 1261: if((int)val < 0) {
"1261
[e $ ! < -> _val `i -> 0 `i 77  ]
{
[; ;doprnt.c: 1262: flag |= 0x03;
"1262
[e =| _flag -> -> 3 `i `us ]
[; ;doprnt.c: 1263: val = -val;
"1263
[e = _val -U _val ]
"1264
}
[e :U 77 ]
"1266
}
[; ;doprnt.c: 1264: }
[; ;doprnt.c: 1266: }
[e $U 78  ]
"1268
[e :U 76 ]
[; ;doprnt.c: 1268: else
[; ;doprnt.c: 1273: {
"1273
{
[; ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
"1286
[e = _val *U -> ( ___va_arg , (. -> *U -> _ap `**ui `*v -> -> 0 `i `ui `*ui ]
"1287
}
[e :U 78 ]
[; ;doprnt.c: 1287: }
[; ;doprnt.c: 1290: if(prec == 0 && val == 0)
"1290
[e $ ! && == -> _prec `i -> 0 `i == _val -> -> 0 `i `ui 79  ]
[; ;doprnt.c: 1291: prec++;
"1291
[e ++ _prec -> -> 1 `i `c ]
[e :U 79 ]
[; ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
"1294
[e $U 81  ]
{
[; ;doprnt.c: 1299: case 0x00:
"1299
[e :U 82 ]
"1302
[e :U 83 ]
[; ;doprnt.c: 1302: case 0xC0:
[; ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
"1305
{
[e = _c -> -> 1 `i `c ]
[e $ != -> -> _c `i `ui / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui 84  ]
[e $U 85  ]
"1306
[e :U 84 ]
[; ;doprnt.c: 1306: if(val < dpowers[c])
[e $ ! < _val *U + &U _dpowers * -> -> _c `uc `ux -> -> # *U &U _dpowers `ui `ux 87  ]
[; ;doprnt.c: 1307: break;
"1307
[e $U 85  ]
[e :U 87 ]
"1305
[e ++ _c -> -> 1 `i `c ]
[e $ != -> -> _c `i `ui / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui 84  ]
[e :U 85 ]
"1309
}
[; ;doprnt.c: 1309: break;
[e $U 80  ]
[; ;doprnt.c: 1314: case 0x80:
"1314
[e :U 88 ]
[; ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
"1316
{
[e = _c -> -> 1 `i `c ]
[e $ != -> -> _c `i `ui / -> # _hexpowers `ui -> # *U + &U _hexpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _hexpowers `ui `ux `ui 89  ]
[e $U 90  ]
"1317
[e :U 89 ]
[; ;doprnt.c: 1317: if(val < hexpowers[c])
[e $ ! < _val *U + &U _hexpowers * -> -> _c `uc `ux -> -> # *U &U _hexpowers `ui `ux 92  ]
[; ;doprnt.c: 1318: break;
"1318
[e $U 90  ]
[e :U 92 ]
"1316
[e ++ _c -> -> 1 `i `c ]
[e $ != -> -> _c `i `ui / -> # _hexpowers `ui -> # *U + &U _hexpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _hexpowers `ui `ux `ui 89  ]
[e :U 90 ]
"1320
}
[; ;doprnt.c: 1320: break;
[e $U 80  ]
[; ;doprnt.c: 1326: case 0x40:
"1326
[e :U 93 ]
[; ;doprnt.c: 1328: for(c = 1 ; c != sizeof octpowers/sizeof octpowers[0] ; c++)
"1328
{
[e = _c -> -> 1 `i `c ]
[e $ != -> -> _c `i `ui / -> # _octpowers `ui -> # *U + &U _octpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _octpowers `ui `ux `ui 94  ]
[e $U 95  ]
"1329
[e :U 94 ]
[; ;doprnt.c: 1329: if(val < octpowers[c])
[e $ ! < _val *U + &U _octpowers * -> -> _c `uc `ux -> -> # *U &U _octpowers `ui `ux 97  ]
[; ;doprnt.c: 1330: break;
"1330
[e $U 95  ]
[e :U 97 ]
"1328
[e ++ _c -> -> 1 `i `c ]
[e $ != -> -> _c `i `ui / -> # _octpowers `ui -> # *U + &U _octpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _octpowers `ui `ux `ui 94  ]
[e :U 95 ]
"1332
}
[; ;doprnt.c: 1332: break;
[e $U 80  ]
"1336
}
[; ;doprnt.c: 1336: }
[e $U 80  ]
"1294
[e :U 81 ]
[e [\ -> & -> _flag `ui -> -> 192 `i `ui `uc , $ -> -> 0 `i `uc 82
 , $ -> -> 192 `i `uc 83
 , $ -> -> 128 `i `uc 88
 , $ -> -> 64 `i `uc 93
 80 ]
"1336
[e :U 80 ]
[; ;doprnt.c: 1339: if(c < prec)
"1339
[e $ ! < -> _c `i -> _prec `i 98  ]
[; ;doprnt.c: 1340: c = prec;
"1340
[e = _c _prec ]
[e $U 99  ]
"1341
[e :U 98 ]
[; ;doprnt.c: 1341: else if(prec < c)
[e $ ! < -> _prec `i -> _c `i 100  ]
[; ;doprnt.c: 1342: prec = c;
"1342
[e = _prec _c ]
[e :U 100 ]
"1345
[e :U 99 ]
[; ;doprnt.c: 1345: if(width && flag & 0x03)
[e $ ! && != _width -> 0 `i != & -> _flag `ui -> -> 3 `i `ui -> -> 0 `i `ui 101  ]
[; ;doprnt.c: 1346: width--;
"1346
[e -- _width -> 1 `i ]
[e :U 101 ]
[; ;doprnt.c: 1348: if(flag & 0x4000) {
"1348
[e $ ! != & -> _flag `ui -> -> 16384 `i `ui -> -> 0 `i `ui 102  ]
{
[; ;doprnt.c: 1349: if(width > prec)
"1349
[e $ ! > _width -> _prec `i 103  ]
[; ;doprnt.c: 1350: width -= prec;
"1350
[e =- _width -> _prec `i ]
[e $U 104  ]
"1351
[e :U 103 ]
[; ;doprnt.c: 1351: else
[; ;doprnt.c: 1352: width = 0;
"1352
[e = _width -> 0 `i ]
[e :U 104 ]
"1353
}
[e :U 102 ]
[; ;doprnt.c: 1353: }
[; ;doprnt.c: 1357: if((flag & (
[; ;doprnt.c: 1359: 0x04|
[; ;doprnt.c: 1361: (0xC0)|0x800)) == (0x40|0x800)) {
"1361
[e $ ! == & -> _flag `ui -> | | -> 4 `i -> 192 `i -> 2048 `i `ui -> | -> 64 `i -> 2048 `i `ui 105  ]
{
[; ;doprnt.c: 1362: if(width)
"1362
[e $ ! != _width -> 0 `i 106  ]
[; ;doprnt.c: 1363: width--;
"1363
[e -- _width -> 1 `i ]
[e :U 106 ]
"1364
}
[; ;doprnt.c: 1364: } else
[e $U 107  ]
[e :U 105 ]
[; ;doprnt.c: 1368: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
"1368
[e $ ! == & -> _flag `ui -> | -> 192 `i -> 2048 `i `ui -> | -> 128 `i -> 2048 `i `ui 108  ]
{
[; ;doprnt.c: 1372: if(width > 2)
"1372
[e $ ! > _width -> 2 `i 109  ]
[; ;doprnt.c: 1373: width -= 2;
"1373
[e =- _width -> 2 `i ]
[e $U 110  ]
"1374
[e :U 109 ]
[; ;doprnt.c: 1374: else
[; ;doprnt.c: 1375: width = 0;
"1375
[e = _width -> 0 `i ]
[e :U 110 ]
"1376
}
[e :U 108 ]
"1381
[e :U 107 ]
[; ;doprnt.c: 1376: }
[; ;doprnt.c: 1381: if(width > c)
[e $ ! > _width -> _c `i 111  ]
[; ;doprnt.c: 1382: width -= c;
"1382
[e =- _width -> _c `i ]
[e $U 112  ]
"1383
[e :U 111 ]
[; ;doprnt.c: 1383: else
[; ;doprnt.c: 1384: width = 0;
"1384
[e = _width -> 0 `i ]
[e :U 112 ]
[; ;doprnt.c: 1387: if(flag & 0x04) {
"1387
[e $ ! != & -> _flag `ui -> -> 4 `i `ui -> -> 0 `i `ui 113  ]
{
[; ;doprnt.c: 1392: if(flag & 0x03)
"1392
[e $ ! != & -> _flag `ui -> -> 3 `i `ui -> -> 0 `i `ui 114  ]
[; ;doprnt.c: 1393: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
"1393
[e $ ! != . *U _pb 1 -> -> 0 `i `*F10 115  ]
[e ( *U . *U _pb 1 (1 -> -> 45 `ui `uc ]
[e $U 116  ]
[e :U 115 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> -> 45 `ui `uc ]
[e :U 116 ]
[e $U 117  ]
"1396
[e :U 114 ]
[; ;doprnt.c: 1396: else
[; ;doprnt.c: 1399: if(flag & 0x01)
"1399
[e $ ! != & -> _flag `ui -> -> 1 `i `ui -> -> 0 `i `ui 118  ]
[; ;doprnt.c: 1400: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
"1400
[e $ ! != . *U _pb 1 -> -> 0 `i `*F10 119  ]
[e ( *U . *U _pb 1 (1 -> -> 32 `ui `uc ]
[e $U 120  ]
[e :U 119 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> -> 32 `ui `uc ]
[e :U 120 ]
[e $U 121  ]
"1403
[e :U 118 ]
[; ;doprnt.c: 1403: else if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
[e $ ! == & -> _flag `ui -> | -> 192 `i -> 2048 `i `ui -> | -> 128 `i -> 2048 `i `ui 122  ]
{
[; ;doprnt.c: 1404: if(pb->func) (pb->func('0')); else ((*pb->ptr++ = '0'));
"1404
[e $ ! != . *U _pb 1 -> -> 0 `i `*F10 123  ]
[e ( *U . *U _pb 1 (1 -> -> 48 `ui `uc ]
[e $U 124  ]
[e :U 123 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> -> 48 `ui `uc ]
[e :U 124 ]
[; ;doprnt.c: 1406: if(pb->func) (pb->func(flag & 0x20 ? 'X' : 'x')); else ((*pb->ptr++ = flag & 0x20 ? 'X' : 'x'));
"1406
[e $ ! != . *U _pb 1 -> -> 0 `i `*F10 125  ]
[e ( *U . *U _pb 1 (1 -> ? != & -> _flag `ui -> -> 32 `i `ui -> -> 0 `i `ui : -> 88 `ui -> 120 `ui `uc ]
[e $U 126  ]
[e :U 125 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> ? != & -> _flag `ui -> -> 32 `i `ui -> -> 0 `i `ui : -> 88 `ui -> 120 `ui `uc ]
[e :U 126 ]
"1412
}
[e :U 122 ]
"1415
[e :U 121 ]
[e :U 117 ]
[; ;doprnt.c: 1412: }
[; ;doprnt.c: 1415: if(width)
[e $ ! != _width -> 0 `i 127  ]
[; ;doprnt.c: 1416: do
"1416
[e :U 130 ]
[; ;doprnt.c: 1417: if(pb->func) (pb->func('0')); else ((*pb->ptr++ = '0'));
"1417
[e $ ! != . *U _pb 1 -> -> 0 `i `*F10 131  ]
[e ( *U . *U _pb 1 (1 -> -> 48 `ui `uc ]
[e $U 132  ]
[e :U 131 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> -> 48 `ui `uc ]
[e :U 132 ]
[; ;doprnt.c: 1418: while(--width);
"1418
[e $ != =- _width -> 1 `i -> 0 `i 130  ]
[e :U 129 ]
[e :U 127 ]
"1420
}
[; ;doprnt.c: 1420: } else
[e $U 133  ]
[e :U 113 ]
[; ;doprnt.c: 1422: {
"1422
{
[; ;doprnt.c: 1424: if(width
[; ;doprnt.c: 1426: && !(flag & 0x08)
[; ;doprnt.c: 1428: )
"1428
[e $ ! && != _width -> 0 `i ! != & -> _flag `ui -> -> 8 `i `ui -> -> 0 `i `ui 134  ]
[; ;doprnt.c: 1429: do
"1429
[e :U 137 ]
[; ;doprnt.c: 1430: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
"1430
[e $ ! != . *U _pb 1 -> -> 0 `i `*F10 138  ]
[e ( *U . *U _pb 1 (1 -> -> 32 `ui `uc ]
[e $U 139  ]
[e :U 138 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> -> 32 `ui `uc ]
[e :U 139 ]
[; ;doprnt.c: 1431: while(--width);
"1431
[e $ != =- _width -> 1 `i -> 0 `i 137  ]
[e :U 136 ]
[e :U 134 ]
[; ;doprnt.c: 1438: if(flag & 0x03)
"1438
[e $ ! != & -> _flag `ui -> -> 3 `i `ui -> -> 0 `i `ui 140  ]
[; ;doprnt.c: 1439: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
"1439
[e $ ! != . *U _pb 1 -> -> 0 `i `*F10 141  ]
[e ( *U . *U _pb 1 (1 -> -> 45 `ui `uc ]
[e $U 142  ]
[e :U 141 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> -> 45 `ui `uc ]
[e :U 142 ]
[e $U 143  ]
"1443
[e :U 140 ]
[; ;doprnt.c: 1443: else if(flag & 0x01)
[e $ ! != & -> _flag `ui -> -> 1 `i `ui -> -> 0 `i `ui 144  ]
[; ;doprnt.c: 1444: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
"1444
[e $ ! != . *U _pb 1 -> -> 0 `i `*F10 145  ]
[e ( *U . *U _pb 1 (1 -> -> 32 `ui `uc ]
[e $U 146  ]
[e :U 145 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> -> 32 `ui `uc ]
[e :U 146 ]
[e :U 144 ]
"1448
[e :U 143 ]
[; ;doprnt.c: 1448: if((flag & ((0xC0)|0x800)) == (0x40|0x800))
[e $ ! == & -> _flag `ui -> | -> 192 `i -> 2048 `i `ui -> | -> 64 `i -> 2048 `i `ui 147  ]
[; ;doprnt.c: 1449: if(pb->func) (pb->func('0')); else ((*pb->ptr++ = '0'));
"1449
[e $ ! != . *U _pb 1 -> -> 0 `i `*F10 148  ]
[e ( *U . *U _pb 1 (1 -> -> 48 `ui `uc ]
[e $U 149  ]
[e :U 148 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> -> 48 `ui `uc ]
[e :U 149 ]
[e $U 150  ]
"1450
[e :U 147 ]
[; ;doprnt.c: 1450: else
[; ;doprnt.c: 1454: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
"1454
[e $ ! == & -> _flag `ui -> | -> 192 `i -> 2048 `i `ui -> | -> 128 `i -> 2048 `i `ui 151  ]
{
[; ;doprnt.c: 1458: if(pb->func) (pb->func('0')); else ((*pb->ptr++ = '0'));
"1458
[e $ ! != . *U _pb 1 -> -> 0 `i `*F10 152  ]
[e ( *U . *U _pb 1 (1 -> -> 48 `ui `uc ]
[e $U 153  ]
[e :U 152 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> -> 48 `ui `uc ]
[e :U 153 ]
[; ;doprnt.c: 1460: if(pb->func) (pb->func(flag & 0x20 ? 'X' : 'x')); else ((*pb->ptr++ = flag & 0x20 ? 'X' : 'x'));
"1460
[e $ ! != . *U _pb 1 -> -> 0 `i `*F10 154  ]
[e ( *U . *U _pb 1 (1 -> ? != & -> _flag `ui -> -> 32 `i `ui -> -> 0 `i `ui : -> 88 `ui -> 120 `ui `uc ]
[e $U 155  ]
[e :U 154 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> ? != & -> _flag `ui -> -> 32 `i `ui -> -> 0 `i `ui : -> 88 `ui -> 120 `ui `uc ]
[e :U 155 ]
"1466
}
[e :U 151 ]
"1469
[e :U 150 ]
}
[e :U 133 ]
[; ;doprnt.c: 1466: }
[; ;doprnt.c: 1469: }
[; ;doprnt.c: 1474: while(prec--) {
"1474
[e $U 156  ]
[e :U 157 ]
{
[; ;doprnt.c: 1476: switch((unsigned char)(flag & (0xC0)))
"1476
[e $U 160  ]
[; ;doprnt.c: 1478: {
"1478
{
[; ;doprnt.c: 1483: case 0x00:
"1483
[e :U 161 ]
"1486
[e :U 162 ]
[; ;doprnt.c: 1486: case 0xC0:
[; ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
"1489
[e = _c -> + % / _val *U + &U _dpowers * -> -> _prec `uc `ux -> -> # *U &U _dpowers `ui `ux -> -> 10 `i `ui -> 48 `ui `c ]
[; ;doprnt.c: 1491: break;
"1491
[e $U 159  ]
[; ;doprnt.c: 1497: case 0x80:
"1497
[e :U 163 ]
[; ;doprnt.c: 1499: {
"1499
{
"1500
[v _idx `uc ~T0 @X0 1 a ]
[; ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
[e = _idx -> & / _val *U + &U _hexpowers * -> -> _prec `uc `ux -> -> # *U &U _hexpowers `ui `ux -> -> 15 `i `ui `uc ]
[; ;doprnt.c: 1502: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
"1502
[e = _c -> *U + ? != & -> _flag `ui -> -> 32 `i `ui -> -> 0 `i `ui : :s 2C :s 3C * -> _idx `ux -> -> # *U ? != & -> _flag `ui -> -> 32 `i `ui -> -> 0 `i `ui : :s 2C :s 3C `ui `ux `c ]
"1508
}
[; ;doprnt.c: 1508: }
[; ;doprnt.c: 1510: break;
"1510
[e $U 159  ]
[; ;doprnt.c: 1516: case 0x40:
"1516
[e :U 164 ]
[; ;doprnt.c: 1518: c = ((val / octpowers[prec]) & 07) + '0';
"1518
[e = _c -> + & / _val *U + &U _octpowers * -> -> _prec `uc `ux -> -> # *U &U _octpowers `ui `ux -> -> 7 `i `ui -> 48 `ui `c ]
[; ;doprnt.c: 1520: break;
"1520
[e $U 159  ]
"1523
}
[; ;doprnt.c: 1523: }
[e $U 159  ]
"1476
[e :U 160 ]
[e [\ -> & -> _flag `ui -> -> 192 `i `ui `uc , $ -> -> 0 `i `uc 161
 , $ -> -> 192 `i `uc 162
 , $ -> -> 128 `i `uc 163
 , $ -> -> 64 `i `uc 164
 159 ]
"1523
[e :U 159 ]
[; ;doprnt.c: 1524: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
"1524
[e $ ! != . *U _pb 1 -> -> 0 `i `*F10 165  ]
[e ( *U . *U _pb 1 (1 -> _c `uc ]
[e $U 166  ]
[e :U 165 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> _c `uc ]
[e :U 166 ]
"1525
}
[e :U 156 ]
"1474
[e $ != -> -- _prec -> -> 1 `i `c `i -> -> -> 0 `i `c `i 157  ]
[e :U 158 ]
[; ;doprnt.c: 1525: }
[; ;doprnt.c: 1528: if((flag & 0x08) && width > 0)
"1528
[e $ ! && != & -> _flag `ui -> -> 8 `i `ui -> -> 0 `i `ui > _width -> 0 `i 167  ]
[; ;doprnt.c: 1529: do
"1529
[e :U 170 ]
[; ;doprnt.c: 1530: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
"1530
[e $ ! != . *U _pb 1 -> -> 0 `i `*F10 171  ]
[e ( *U . *U _pb 1 (1 -> -> 32 `ui `uc ]
[e $U 172  ]
[e :U 171 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> -> 32 `ui `uc ]
[e :U 172 ]
[; ;doprnt.c: 1531: while(--width);
"1531
[e $ != =- _width -> 1 `i -> 0 `i 170  ]
[e :U 169 ]
[e :U 167 ]
"1533
}
[e :U 8 ]
"536
[e $ != -> = _c -> *U ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x `c `i -> -> -> 0 `i `c `i 9  ]
[e :U 10 ]
[; ;doprnt.c: 1533: }
[; ;doprnt.c: 1535: alldone:
"1535
[e :U 40 ]
[; ;doprnt.c: 1540: return 0;
"1540
[e ) -> 0 `i ]
[e $UE 7  ]
[; ;doprnt.c: 1541: }
"1541
[e :UE 7 ]
}
[a 3C 48 49 50 51 52 53 54 55 56 57 97 98 99 100 101 102 0 ]
[a 2C 48 49 50 51 52 53 54 55 56 57 65 66 67 68 69 70 0 ]
[a 1C 40 110 117 108 108 41 0 ]
